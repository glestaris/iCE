#!/bin/bash
set -e
BASE_PATH=$(cd $(dirname $BASH_SOURCE)/..; pwd)
source $BASE_PATH/hack/message_printing.sh

usage() {
  echo "Usage:"
  echo "run-tests               --- run all the tests"
  echo "run-tests -c            --- create coverage report"
  echo "run-tests -m <Module>   --- only run tests in given module"
  echo "  only run tests in given file, when running integration tests"
  echo "run-tests -i            --- run integration tests only"
  echo "run-tests -v            --- run tests in verbose mode"
  echo "run-tests -h            --- print help menu"
}

setup_mongo() {
  info "Starting MongoDB Docker container"
  cmd="docker "
  cmd=$cmd" run"
  cmd=$cmd" -d"
  cmd=$cmd" --name test-ice-mongo"
  cmd=$cmd" -p 12222:27017"
  cmd=$cmd" mongo"
  debug "About to run '$cmd'"
  DOCKER_CONTAINER_ID=$(eval $cmd)
  info "Container is '$DOCKER_CONTAINER_ID'"
}

setup_docker_cache() {
  info "Pulling alpine image to warm the Docker cache"
  info "--------- Docker output START ---------"
  docker pull alpine:latest
  docker pull quay.io/macropin/sshd:latest
  info "--------- Docker output END ---------"
}

is_mac() {
  [ $(uname -s) == "Darwin" ]
}

get_host_ip_fc() {
  echo "10.200.10.1"
}

setup_docker_mac_net() {
  info "Setting up host network with containers"
  cmd="sudo ifconfig lo0 alias 10.200.10.1/24"
  debug "About to run '$cmd'"
  info "Your admin password may be required"
  eval $cmd
}

setup_docker_linux_net() {
  info "Setting up host network with containers"
  cmd="ip addr add 10.200.10.1/24 dev lo"
  debug "About to run '$cmd'"
  info "Your admin password may be required"
  eval $cmd
}

setup() {
  setup_mongo

  if [ $RUN_INTEGRATION -eq 1 ]; then
    info "[INTEGRATION TEST SETUP]"
    setup_docker_cache
    if is_mac; then
      setup_docker_mac_net
    else
      setup_docker_linux_net
    fi
  fi
}

run_integration() {
  # command
  cmd="behave"
  if [ "$MODULE" != "" ]; then
    cmd=$cmd" $MODULE"
  else
    cmd=$cmd" $BASE_PATH/testing/integration"
  fi
  debug "About to run '$cmd'"

  # envars
  export TEST_ICE_MONGO_PORT=12222
  export TEST_HOST_IP_FC=$(get_host_ip_fc)
  [ $DEBUG -eq 1 ] && export TEST_ICE_DEBUG=1

  # run tests but don't blow up
  info "--------- Behave output START ---------"
  set +e
  eval $cmd
  TESTS_EXIT_CODE=$?
  set -e
  info "--------- Behave output END ---------"

  info "Behave exited with code $TESTS_EXIT_CODE"
}

run_nose() {
  # command
  cmd="nosetests"
  if [ $WITH_COVERAGE -eq 1 ]; then
    cmd=$cmd" --with-coverage"
    cmd=$cmd" --cover-package ice"
    cmd=$cmd" --cover-html"
    cmd=$cmd" --cover-erase"
    cmd=$cmd" --cover-html-dir coveragereport"
  fi
  [ $DEBUG -eq 1 ] && cmd=$cmd" -v"
  [ "$MODULE" != "" ] && cmd=$cmd" $MODULE"

  # envars
  export TEST_ICE_MONGO_PORT=12222
  [ $DEBUG -eq 1 ] && export TEST_ICE_DEBUG=1

  info "About to run '$cmd'"

  # run tests but don't blow up
  info "--------- Nose output START ---------"
  set +e
  eval $cmd
  TESTS_EXIT_CODE=$?
  set -e
  info "--------- Nose output END ---------"

  info "Nose exited with code $TESTS_EXIT_CODE"
}

teardown_mongo() {
  debug "Removing MongoDB Docker container"
  cmd="docker rm -f test-ice-mongo > /dev/null"
  debug "About to run '$cmd'"
  eval $cmd
  info "MongoDB container has been cleaned up!"
}

teardown_docker_mac_net() {
  info "Cleaning up network settings made for Docker containers"
  cmd="sudo ifconfig lo0 -alias 10.200.10.1"
  debug "About to run '$cmd'"
  info "Your admin password may be required"
  eval $cmd
  info "The network has been cleaned up!"
}

teardown_docker_linux_net() {
  info "Cleaning up network settings made for Docker containers"
  cmd="ip addr del 10.200.10.1/24 dev lo"
  debug "About to run '$cmd'"
  info "Your admin password may be required"
  eval $cmd
  info "The network has been cleaned up!"
}

teardown() {
  teardown_mongo
  if [ $RUN_INTEGRATION -eq 1 ]; then
    info "[INTEGRATION TEST TEARDOWN]"
    if is_mac; then
      teardown_docker_mac_net
    else
      teardown_docker_linux_net
    fi
  fi
}

DEBUG=0
RUN_INTEGRATION=0
MODULE=""
WITH_COVERAGE=0
while getopts "m:icvh" OPTION
do
  case $OPTION in
    i)
      RUN_INTEGRATION=1
      ;;
    m)
      MODULE=$OPTARG
      ;;
    c)
      WITH_COVERAGE=1
      ;;
    v)
      DEBUG=1
      ;;
    h)
      usage
      exit
      ;;
    *)
      usage
      exit
      ;;
  esac
done

debug "run_integration=$RUN_INTEGRATION"
debug "module='$MODULE'"
debug "with_coverage=$WITH_COVERAGE"
debug "verbose=$DEBUG"

# some action...
setup
if [ $RUN_INTEGRATION -eq 1 ]; then
  run_integration
else
  run_nose
fi
teardown

exit $TESTS_EXIT_CODE
